use strict;
use warnings;

package Spark::Types::Roles;

# ABSTRACT: MooseX::Types for all Spark Roles

# NOTE: This file is generated from the template Spark_Types_Roles.pm.tpl
# DO NOT EDIT THIS FILE.
# Last generated at Thu Dec 29 17:24:26 2011

use MooseX::Types -declare => [qw(
      SparkBlockContainer
      SparkBlockLabelled
      SparkBlockNamed
      SparkBlockRenders
      SparkBlockValidates
      SparkBlocksValidatesWithValidators
      SparkField
      SparkFieldNamed
      SparkForm
      SparkNode
      SparkParent
      SparkRenderer
      SparkRendererContainer
      SparkRoleContainer
      SparkRoleLabelled
      SparkRoleNamed
      SparkRoleRenders
      SparkRoleValidates
      SparkSimpleField
      SparkSimpleForm
      SparkSimpleNode
      SparkSimpleValidator
      SparkValidator
      )];
use namespace::autoclean;

=head1 TYPES



=head2 SparkBlockContainer

  does => 'Spark::Block::Container'

=cut

role_type SparkBlockContainer, {
    role    => 'Spark::Block::Container',
    message => sub {
        return qq{$_ is not of role "Spark::Block::Container"};
    },
};

=head2 SparkBlockLabelled

  does => 'Spark::Block::Labelled'

=cut

role_type SparkBlockLabelled, {
    role    => 'Spark::Block::Labelled',
    message => sub {
        return qq{$_ is not of role "Spark::Block::Labelled"};
    },
};

=head2 SparkBlockNamed

  does => 'Spark::Block::Named'

=cut

role_type SparkBlockNamed, {
    role    => 'Spark::Block::Named',
    message => sub {
        return qq{$_ is not of role "Spark::Block::Named"};
    },
};

=head2 SparkBlockRenders

  does => 'Spark::Block::Renders'

=cut

role_type SparkBlockRenders, {
    role    => 'Spark::Block::Renders',
    message => sub {
        return qq{$_ is not of role "Spark::Block::Renders"};
    },
};

=head2 SparkBlockValidates

  does => 'Spark::Block::Validates'

=cut

role_type SparkBlockValidates, {
    role    => 'Spark::Block::Validates',
    message => sub {
        return qq{$_ is not of role "Spark::Block::Validates"};
    },
};

=head2 SparkBlocksValidatesWithValidators

  does => 'Spark::Blocks::Validates::WithValidators'

=cut

role_type SparkBlocksValidatesWithValidators, {
    role    => 'Spark::Blocks::Validates::WithValidators',
    message => sub {
        return qq{$_ is not of role "Spark::Blocks::Validates::WithValidators"};
    },
};

=head2 SparkField

  does => 'Spark::Field'

=cut

role_type SparkField, {
    role    => 'Spark::Field',
    message => sub {
        return qq{$_ is not of role "Spark::Field"};
    },
};

=head2 SparkFieldNamed

  does => 'Spark::Field::Named'

=cut

role_type SparkFieldNamed, {
    role    => 'Spark::Field::Named',
    message => sub {
        return qq{$_ is not of role "Spark::Field::Named"};
    },
};

=head2 SparkForm

  does => 'Spark::Form'

=cut

role_type SparkForm, {
    role    => 'Spark::Form',
    message => sub {
        return qq{$_ is not of role "Spark::Form"};
    },
};

=head2 SparkNode

  does => 'Spark::Node'

=cut

role_type SparkNode, {
    role    => 'Spark::Node',
    message => sub {
        return qq{$_ is not of role "Spark::Node"};
    },
};

=head2 SparkParent

  does => 'Spark::Parent'

=cut

role_type SparkParent, {
    role    => 'Spark::Parent',
    message => sub {
        return qq{$_ is not of role "Spark::Parent"};
    },
};

=head2 SparkRenderer

  does => 'Spark::Renderer'

=cut

role_type SparkRenderer, {
    role    => 'Spark::Renderer',
    message => sub {
        return qq{$_ is not of role "Spark::Renderer"};
    },
};

=head2 SparkRendererContainer

  does => 'Spark::Renderer::Container'

=cut

role_type SparkRendererContainer, {
    role    => 'Spark::Renderer::Container',
    message => sub {
        return qq{$_ is not of role "Spark::Renderer::Container"};
    },
};

=head2 SparkRoleContainer

  does => 'Spark::Role::Container'

=cut

role_type SparkRoleContainer, {
    role    => 'Spark::Role::Container',
    message => sub {
        return qq{$_ is not of role "Spark::Role::Container"};
    },
};

=head2 SparkRoleLabelled

  does => 'Spark::Role::Labelled'

=cut

role_type SparkRoleLabelled, {
    role    => 'Spark::Role::Labelled',
    message => sub {
        return qq{$_ is not of role "Spark::Role::Labelled"};
    },
};

=head2 SparkRoleNamed

  does => 'Spark::Role::Named'

=cut

role_type SparkRoleNamed, {
    role    => 'Spark::Role::Named',
    message => sub {
        return qq{$_ is not of role "Spark::Role::Named"};
    },
};

=head2 SparkRoleRenders

  does => 'Spark::Role::Renders'

=cut

role_type SparkRoleRenders, {
    role    => 'Spark::Role::Renders',
    message => sub {
        return qq{$_ is not of role "Spark::Role::Renders"};
    },
};

=head2 SparkRoleValidates

  does => 'Spark::Role::Validates'

=cut

role_type SparkRoleValidates, {
    role    => 'Spark::Role::Validates',
    message => sub {
        return qq{$_ is not of role "Spark::Role::Validates"};
    },
};

=head2 SparkSimpleField

  does => 'Spark::Simple::Field'

=cut

role_type SparkSimpleField, {
    role    => 'Spark::Simple::Field',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Field"};
    },
};

=head2 SparkSimpleForm

  does => 'Spark::Simple::Form'

=cut

role_type SparkSimpleForm, {
    role    => 'Spark::Simple::Form',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Form"};
    },
};

=head2 SparkSimpleNode

  does => 'Spark::Simple::Node'

=cut

role_type SparkSimpleNode, {
    role    => 'Spark::Simple::Node',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Node"};
    },
};

=head2 SparkSimpleValidator

  does => 'Spark::Simple::Validator'

=cut

role_type SparkSimpleValidator, {
    role    => 'Spark::Simple::Validator',
    message => sub {
        return qq{$_ is not of role "Spark::Simple::Validator"};
    },
};

=head2 SparkValidator

  does => 'Spark::Validator'

=cut

role_type SparkValidator, {
    role    => 'Spark::Validator',
    message => sub {
        return qq{$_ is not of role "Spark::Validator"};
    },
};

1;
__END__
